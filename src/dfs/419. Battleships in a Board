class Solution {
public:
    
    void dfs(vector<vector<char>>& board, int row, int col, int **visited)
    {
        visited[row][col] = 1;
        
        if(col == board[0].size() - 1 && row != board.size() - 1) // last col
        {
            if(board[row+1][col] == 'X' && visited[row+1][col] == 0)
            {
                dfs(board, row+1, col, visited);
            }
        }
        else if(row == board.size() - 1) // last row
        {
            if(col == board[0].size() - 1)
            {
                return;
            }
            else
            {
                if(board[row][col+1] == 'X' && visited[row][col+1] == 0)
                 {
                   dfs(board, row, col+1, visited);
                 } 
            }
        }
        else
        {
            if(board[row+1][col] == 'X' && visited[row+1][col] == 0)
            {
                dfs(board, row+1, col, visited);
            }
            else if(board[row][col+1] == 'X' && visited[row][col+1] == 0)
                 {
                   dfs(board, row, col+1, visited);
             }
        }
    }
    
    
    int countBattleships(vector<vector<char>>& board) {
        
       int **visited;
        visited = (int **)malloc(sizeof(int *) * board.size());
        
        for(int i = 0; i < board.size(); i++)
        {
            visited[i] = (int *)malloc(sizeof(int) * board[0].size());
        }
        
      //  int visited[board.size()][board[0].size()] = {0};
        int ans = 0;
        
         for(int row = 0; row < board.size(); row++)
        {
            for(int col = 0;  col < board[0].size(); col++)
            {
               visited[row][col]=0;
            }
        }
        
        for(int row = 0; row < board.size(); row++)
        {
            for(int col = 0;  col < board[0].size(); col++)
            {
                if(board[row][col] == 'X' && visited[row][col] == 0)
                {
                    cout<<visited[0][0]<<endl;
                    cout<<row<<" "<<col;
                    dfs(board, row, col, visited);
                    ans++;
                }
            }
        }
        
        
        
        
        return ans;
        
    }
};